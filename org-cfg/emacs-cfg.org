#+STARTIP: overview
#+TITLE: Emacs Init
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/

* Emacs Appearance
** Default Setup
   #+BEGIN_SRC emacs-lisp
     (setq-default inhibit-startup-message t
	   truncate-lines t)
     (tool-bar-mode -1)
     (global-hl-line-mode t)
     (scroll-bar-mode -1)
   #+END_SRC

** Color Theme
   #+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config (load-theme 'solarized-dark t))
   #+END_SRC
** Font Setup
   #+BEGIN_SRC emacs-lisp
     ;(add-to-list 'default-frame-alist '(font . "Monospace-12"))

   #+END_SRC

* The Default Packages for Editing
** autocomplte 
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (progn
	 (ac-config-default)
	 (global-auto-complete-mode t)
	 ))
   #+END_SRC

** try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
    
** which-key 
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** ace-window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 ))
   #+END_SRC

** swiper
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       )

     (use-package swiper
       :ensure try
       :config
       (progn
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (global-set-key "\C-s" 'swiper)
	 ))
   #+END_SRC

** iedit
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t)

   #+END_SRC
** helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :init 
       (progn
	 (require 'helm-config)
	 (global-set-key (kbd "M-x") 'helm-M-x)
	 (global-set-key (kbd "C-x C-f") 'helm-find-files)
	 (global-set-key (kbd "C-x C-b") 'helm-buffer-list)
	 (global-set-key (kbd "C-x b") 'helm-mini)
	 (global-set-key (kbd "M-y") 'helm-show-kill-ring)
	 (global-set-key (kbd "C-z") 'helm-select-action)
	 (global-set-key (kbd "<tab>") 'helm-execute-persistent-action))
       :config
       (progn
	 (setq helm-split-window-in-side-p t
	       helm-scroll-amount 8
	       helm-ff-file-name-history-use-recentf t)

	 (setq helm-autoresize-max-height 0
	       helm-autoresize-min-height 20)
	 (helm-autoresize-mode 1)

	 (setq helm-buffers-fuzzy-matching t
	       helm-recentf-fuzzy-match t)
	 (helm-mode 1)))
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
	  (use-package magit
	    :ensure t
	    :config
	    (progn
	      (global-set-key (kbd "C-x g") 'magit-status)
	      (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
	      ))
   #+END_SRC 
* The Packages for Org-mode
** org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (progn
	 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
	 ))
   #+END_SRC
** reveal.js
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :ensure t)

     (use-package org-plus-contrib
       :ensure t)
   #+END_SRC

* Common Packages for Developement
** exec-path-from-shell
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :init (exec-path-from-shell-initialize))

   #+END_SRC
** flycheck 
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t)
   #+END_SRC

** yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t)

   #+END_SRC

* Python
** Setup default mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'python-mode-hook 'flycheck-mode)
     (add-hook 'Python-mode-hook 'yas-minor-mode)
   #+END_SRC
** elpy
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :init (elpy-enable))

   #+END_SRC
** anaconda-mode
   #+BEGIN_SRC emacs-lisp
     (use-package anaconda-mode
       :ensure t
       :init (add-hook 'python-mode-hook 'anaconda-mode))

   #+END_SRC
** jedi
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :init
       (progn
	 (add-hook 'python-mode-hook 'jedi:setup)
	 (add-hook 'python-mode-hook 'jedi:ac-setup)
	 ))

   #+END_SRC


