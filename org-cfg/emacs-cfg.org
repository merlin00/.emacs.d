#+STARTIP: overview
#+TITLE: Emacs Init
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/

* Appearance
  - Initial Frame Configuration 
    #+BEGIN_SRC emacs-lisp
      (setq-default inhibit-startup-message t)
      (tool-bar-mode -1)
      (global-hl-line-mode t)
      (scroll-bar-mode -1)

      (add-to-list 'default-frame-alist '(height . 65))
      (add-to-list 'default-frame-alist '(width . 120))
    #+END_SRC
  - Initial Theme
    #+BEGIN_SRC emacs-lisp
      (use-package color-theme-solarized
	:ensure t
	:init (load-theme 'solarized t))
    #+END_SRC
  - Default Font
    #+BEGIN_SRC emacs-lisp
      (unless (eq system-type 'darwin)
	(add-to-list 'default-frame-alist '(font . "Monospace-10")))

      (if (eq system-type 'darwin)
	  (setq mac-command-modifier 'control)
	  (add-to-list 'default-frame-alist '(font . "Menlo 12")))
    #+END_SRC
   
* The Default Packages for Editing
** autocomplte
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (progn
	 (ac-config-default)
	 (setq ac-show-menu-immediately-on-auto-complete t)
	 (global-auto-complete-mode t)
	 ))
   #+END_SRC

** ac-ispell
   #+BEGIN_SRC emacs-lisp
     (use-package ac-ispell
       :ensure t
       :init
       (progn
	 (setq ac-ispell-requires 4)
	 (setq ac-ispell-fuzzy-limit 2)
	 (setq ispell-dictionary "english")
	 (ac-ispell-setup)))
   #+END_SRC

** try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC
    
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+END_SRC

** ace-window
   - Easy to window selection 
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 ))
   #+END_SRC

** iedit
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t)

   #+END_SRC

** helm
   - For incremental completions and narrowing selections     
     
*** helm install & configuration
    #+BEGIN_SRC emacs-lisp
      (use-package helm
	:ensure t
	:init 
	(progn
	  (require 'helm-config)
	  (global-set-key (kbd "M-x") 'helm-M-x)
	  (global-set-key (kbd "C-x C-f") 'helm-find-files)
	  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
	  (global-set-key (kbd "C-x b") 'helm-mini)
	  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
	  (global-set-key (kbd "C-z") 'helm-select-action)
	  (global-set-key (kbd "<tab>") 'helm-execute-persistent-action))
	:config
	(progn
	  (setq helm-split-window-in-side-p t
		helm-scroll-amount 8
		helm-ff-file-name-history-use-recentf t)

	  (setq helm-autoresize-max-height 0
		helm-autoresize-min-height 20)
	  (helm-autoresize-mode 1)

	  (setq helm-buffers-fuzzy-matching t
		helm-recentf-fuzzy-match t)
	  (helm-mode 1)))
    #+END_SRC

*** swiper package install
    - For using swiper instead of default emacs search
      #+BEGIN_SRC emacs-lisp
	(use-package swiper
	  :ensure t)
      #+END_SRC

*** swiper-helm install & configuration
    - For using swiper in helm
      #+BEGIN_SRC emacs-lisp
	(use-package swiper-helm
	  :ensure t
	  :init (global-set-key (kbd "C-s") 'swiper-helm))

      #+END_SRC

** magit
   #+BEGIN_SRC emacs-lisp
	  (use-package magit
	    :ensure t
	    :config
	    (progn
	      (global-set-key (kbd "C-x g") 'magit-status)
	      (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
	      ))
   #+END_SRC 

* The Packages for Org-mode
  - aspell setup
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook 'flyspell-mode)
      (add-hook 'org-mode-hook 'ac-ispell-ac-setup)
    #+END_SRC
** org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (progn
	 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
	 ))
   #+END_SRC

** reveal.js
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :ensure t)

     (use-package org-plus-contrib
       :ensure t)
   #+END_SRC

* Common Packages for Development
** exec-path-from-shell
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :init (exec-path-from-shell-initialize))

   #+END_SRC

** flycheck 
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t)
   #+END_SRC

** yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init (yas-global-mode 1))

   #+END_SRC

* Python
** Default modes for python developement
   #+BEGIN_SRC emacs-lisp
     (add-hook 'python-mode-hook 'flycheck-mode)
     (add-hook 'python-mode-hook 'linum-mode)
   #+END_SRC

** anaconda-mode
   #+BEGIN_SRC emacs-lisp
     (use-package anaconda-mode
       :ensure t
       :init (add-hook 'python-mode-hook 'anaconda-mode)
       )

   #+END_SRC

** elpy
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :init
       (progn
	 (add-hook 'python-mode-hook 'elpy-enable)
	 ))
   #+END_SRC

** jedi
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :init
       (progn
	 (add-hook 'python-mode-hook 'jedi:setup)
	 (setq jedi:setup-keys t)
	 (setq jedi:complete-on-dot t)
	 (add-hook 'python-mode-hook 'jedi:ac-setup)
	 ))

   #+END_SRC

** EIN (Emacs IPython Notebook)
   #+BEGIN_SRC emacs-lisp
     (use-package ein
       :ensure t)
   #+END_SRC
